1. Design an algorithm to figure out if someone has won in a game of tic-tac-toe.
2. Given an image represented by an NxN matrix, where each
pixel in the image is 4 bytes, write a method to rotate the
image by 90 degrees. Can you do this in place?
3. You have two numbers represented by a linked list, where
each node contains a single digit. The digits are stored in
reverse order, such that the 1’s digit is at the head of the list.
Write a function that adds the two numbers and returns the
sum as a linked list.
Input: (3 -Ͼ 1 -Ͼ 5) 1 (5 -Ͼ 9 -Ͼ 2)
Output: 8 -Ͼ 0 -Ͼ 8
4. You are given an array of integers (both positive and nega-
tive). Find the continuous sequence with the largest sum.
Return only the sum.
Input: {2, -8, 3, -2, 4, -10}
Output: 5. (i.e., {3, 2, 4}).
5. Implement a MyQueue class, which implements a queue
using two stacks.
6. Write an algorithm to find the “next” node (i.e., in-order
successor) of a given node in a binary search tree where
each node has a link to its parent.
7. Design the OOD for a deck of cards. Explain how you
would implement a Shuffle() method.
8. Describe an algorithm to find the largest one million num-
bers in one billion numbers. Assume that the computer
memory can hold all one billion numbers.
9. Given two words of equal length that are in a dictionary,
write a method to transform one word into another word184
The Google Résumé
by changing only one letter at a time. The new word you
get in each step must be in the dictionary.
Input: DAMP, LIKE
Output: DAMP -Ͼ LAMP -Ͼ LIME -Ͼ LIKE
10. Given an NxN matrix of positive and negative integers, write
code to find the submatrix with the largest possible sum.
11. In c++, create a 2 dimensional array of triangle and square objects. iterate through it and give total area.
12. In c++, make the equevilent of java's "arraylist".
a) use templates b) it should use [] opperators and have an "add" method. c) it should be able to grow to any size.
13. Using c or c++, use pthreads to spawn 4 threads. They should all try to obtain a mutex, print a message, then release the mutex. Have each print inlcude a thread id. Have each thread stop after 10 prints.
